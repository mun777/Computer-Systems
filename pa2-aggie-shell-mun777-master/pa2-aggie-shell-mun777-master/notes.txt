multiple arguements
command pipelining - output of one command becomes input of next command    
    use command vector to create pipeline
    refer to lab3a, unnamed pipes, pipe()/dup()/dup2()

output redirection - change stdout to file
    open the file for wriitng as file descritpor 
    use dip2 to redirect stdout (1) to ^ fd

input redirection - change stdin from file  
    open the file for reading as a file descriptor 
    use dup 2 to redirect stdin (0) from ^ fd

io redirection can be togther 

file for redirection are stored in the Command class

handle commands that run background
    return the user prompt to user control until command is done
    use Command->isBackground()
    store pid from fork in vector of background processes
    before prompting user, iterate over vector to reap processes
    make waitpid() non-blocking for background processes

(change directory) use chdir() 
    cd - -> keep track of previous 
    getcwd()

user prompt -date/time, user name, abs path of cwd
    getenv("USER") and getcwd()

@33:30: getlogin() should be getenv("USER")
